// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  email       String      @unique
  password    String 
  firstName   String?
  lastName    String
  phone       String      @unique
  role        Role        @default(BASIC)
  status      UserStatus  @default(BASIC)
  isVerified  Boolean     @default(false)
  photo       String?
  orders      Order[]
  addresses   Address[]
  payments    Payment[]
  cartItems   CartItem[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  payments    Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(0)
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  city       String
  address    String
  phone      String
  zip        String?
  default    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Payment {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  amount     Float
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Product {
  id             String      @id @default(uuid())
  title_en       String?
  title_ru       String?
  title_ge       String
  description_en String?
  description_ru String?
  description_ge String
  code           String?
  oem            String?
  price          Float?
  quantity       Int
  thumbnail      String
  productImages  ProductImages[]
  categoryId     Int
  category       Category       @relation(fields: [categoryId], references: [id])
  brandId        Int?
  brand          Brand?         @relation(fields: [brandId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  published      Boolean @default(true)
  cartItems      CartItem[]
  orderItems     OrderItem[]
}

model Category {
  id             Int            @id @default(autoincrement())
  title_ge       String         @unique
  title_en       String?        @unique
  title_ru       String?        @unique
  products       Product[]
}

model Brand {
  id             Int            @id @default(autoincrement())
  brand_ge       String         @unique
  brand_en       String?        @unique
  brand_ru       String?        @unique
  products       Product[]
}

model ProductImages {
  id             Int            @id @default(autoincrement())
  imageUrl       String    
  productId      String
  product        Product        @relation(fields: [productId], references: [id])
}

model About {
  id             Int            @id @default(autoincrement())
  aboutus_ge     String
  aboutus_en     String?
  aboutus_ru     String?
}

enum UserStatus {
  BASIC
  MEDIUM
  VIP
}

enum Role {
  BASIC
  ADMIN
  EDITOR
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
